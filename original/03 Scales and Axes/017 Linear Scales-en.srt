1
00:00:06,780 --> 00:00:11,680
This lecture I'm going to introduce you to scale's explain why we need them for our visualizations and

2
00:00:11,680 --> 00:00:18,980
show you the syntax that we'll use for any skills from the visualization from the end of last section

3
00:00:19,100 --> 00:00:23,630
I gave you your height values reach building used to your size.

4
00:00:24,320 --> 00:00:25,940
I computed these values myself.

5
00:00:25,940 --> 00:00:29,010
So these buildings would have the right portions.

6
00:00:29,060 --> 00:00:32,180
This will only work for completely static visualization.

7
00:00:32,570 --> 00:00:36,680
What if we suddenly wants to show a building which is taller than a tall building.

8
00:00:37,000 --> 00:00:42,260
We would need to increase the size of our SPG canvas or we compute all the values in our dataset for

9
00:00:42,260 --> 00:00:44,450
it to fill the screen.

10
00:00:44,450 --> 00:00:46,030
This is why we need scales.

11
00:00:46,090 --> 00:00:54,290
Three according to Mike Bostock one of the creators of D-3 scales a functions that map from an input

12
00:00:54,290 --> 00:00:57,230
domain to an output range.

13
00:00:57,230 --> 00:01:04,710
What do we mean by this domain domain corresponds to the raw data that we want to put into us.

14
00:01:05,210 --> 00:01:10,300
And the range comes 1 to the value that we want to get out to the scale.

15
00:01:10,400 --> 00:01:14,320
Looking at this diagram should give you a good intuition for what's going on.

16
00:01:14,930 --> 00:01:20,330
I want you to think about scale as being like a magical black box that takes an input and spits out

17
00:01:20,330 --> 00:01:21,880
an output.

18
00:01:22,130 --> 00:01:26,840
We need to set this black box with a domain and range value for it to work.

19
00:01:27,500 --> 00:01:31,910
Let's imagine that we have an SPG with a height of 400 pixels.

20
00:01:31,910 --> 00:01:35,730
I want to say the minimum height for any rectangle should be zero.

21
00:01:35,780 --> 00:01:42,170
If we have a building of zero meters tall and the maximum height of any rectangle should be 400 pixels

22
00:01:42,590 --> 00:01:45,630
representing the tallest building that we want to show.

23
00:01:46,130 --> 00:01:54,200
So the range of this scale our output is going to be between 0 and 400 for the domain we want to take

24
00:01:54,200 --> 00:02:00,280
an interval between 0 and the height of our tallest building which is 828 meters.

25
00:02:00,530 --> 00:02:07,750
So the domain should be between zero and a 128 for this scale if we put in an input of zero.

26
00:02:07,760 --> 00:02:10,940
The scale would spit out the rows and outputs.

27
00:02:11,120 --> 00:02:17,600
If we put in an input that eight hundred twenty eight the scale would spit out 400 as an output.

28
00:02:17,600 --> 00:02:22,910
In this example we have an input of 414 which is the middle of the mains.

29
00:02:22,910 --> 00:02:24,380
The output is hundred.

30
00:02:24,440 --> 00:02:30,390
The middle of range we can also do something similar with colors.

31
00:02:30,410 --> 00:02:35,990
If we pass in strings of two different colors for the range here we can see how the scale would look.

32
00:02:36,010 --> 00:02:40,510
It finds a color which is 30 percent of the way between red and blue.

33
00:02:40,730 --> 00:02:46,010
This type of scale would come in handy if we wanted to make something like a heat map which would convert

34
00:02:46,010 --> 00:02:51,070
a piece of continuous data into a color.

35
00:02:51,080 --> 00:02:56,510
Let's take a look at what the syntax looks like for linear scale the function that we want to use is

36
00:02:56,510 --> 00:03:04,010
called D-3 scale linear and we need to use the domain and range methods to set up the domain and range

37
00:03:04,010 --> 00:03:10,190
in both taking an array of 2 values representing the minimum and maximum values for each.

38
00:03:10,220 --> 00:03:16,040
When we store the scale as a variable this becomes a function that we can use the function will take

39
00:03:16,040 --> 00:03:21,830
one argument which the input value that we want to scale the standard naming convention for scales and

40
00:03:21,830 --> 00:03:25,870
D-3 is to use the name of the axis that the scale will apply to.

41
00:03:25,870 --> 00:03:27,610
So I'm calling this variable y.

42
00:03:27,710 --> 00:03:33,520
But we could just have easily name this function or something else from the console logs underneath

43
00:03:33,530 --> 00:03:35,910
we can see what the scale is doing.

44
00:03:36,200 --> 00:03:41,510
If we put in a value of 100 which would be a relatively small building then we'd get back a value of

45
00:03:41,510 --> 00:03:43,690
just over 48 pixels.

46
00:03:43,940 --> 00:03:50,220
And we think if we have an input of 700 we get a value of around three hundred thirty eight.

47
00:03:50,330 --> 00:03:55,160
Another thing to note is that we can use the inverse method of a scale to find the domain value which

48
00:03:55,160 --> 00:04:01,710
is associated with something in the range for example if you wanted to know how tall a building would

49
00:04:01,710 --> 00:04:07,680
need to be to have a pixel value of forty eight point three then we could call why don't invert with

50
00:04:07,780 --> 00:04:09,910
an argument of forty eight point three.

51
00:04:09,960 --> 00:04:12,760
And it would return 100.

52
00:04:12,820 --> 00:04:18,400
So these three cores to white or invert are basically doing the opposite thing to what three chords

53
00:04:18,400 --> 00:04:19,630
to Wyat doing.

54
00:04:20,510 --> 00:04:25,250
We'll be using the invert method later in the course but we want to get the position of the cursor on

55
00:04:25,250 --> 00:04:25,940
the screen.

56
00:04:28,440 --> 00:04:33,860
Flicking back to code we can use a scale like this to set the heights of our rectangles.

57
00:04:33,930 --> 00:04:39,380
I've copied the scale that we just saw into my main geus file and have changed the building.

58
00:04:39,410 --> 00:04:44,460
Jason File from last section have all meta values instead of pixel values.

59
00:04:46,450 --> 00:04:51,010
If we load the page at this point we can see that everything runs off the page.

60
00:04:51,310 --> 00:04:55,770
The smallest height value in metres is greater than the height of size Fiji.

61
00:04:56,020 --> 00:04:57,750
So it runs up the screen.

62
00:05:00,140 --> 00:05:06,810
All that we need to do to fix this is to pass the height values into a scale function before we return

63
00:05:06,810 --> 00:05:09,880
it as the value of height attributes.

64
00:05:09,920 --> 00:05:15,290
Once we do that we can see that we end up with the same thing that we had from last section but this

65
00:05:15,290 --> 00:05:19,600
time these heights are coming from our scale.

66
00:05:19,650 --> 00:05:25,380
We use a linear scale in this example because we want the height of the rectangles to be directly proportional

67
00:05:25,380 --> 00:05:27,170
to the height of the buildings.

68
00:05:27,600 --> 00:05:32,130
There are other types of scales that we can use for different purposes which will introduce you to the

69
00:05:32,130 --> 00:05:33,330
next few sections.

