1
00:00:06,260 --> 00:00:11,810
In this lecture I'll be explaining band scales which I used to space that rectangle is what we want

2
00:00:11,810 --> 00:00:13,790
to make for charts.

3
00:00:14,060 --> 00:00:19,070
I'll be showing you how the scales look nobody making some edits to a building bar chart from the last

4
00:00:19,070 --> 00:00:19,740
section.

5
00:00:21,750 --> 00:00:26,250
Going back to the code from the last section we have a similar problem that we need to address with

6
00:00:26,250 --> 00:00:33,080
the X-axis as the one we had with the y axis although we can automatically adjust the heights of rectangles

7
00:00:33,100 --> 00:00:39,880
if RJJ it changes things that lineas scale that we made for a y axis with an explanation value for our

8
00:00:39,880 --> 00:00:44,060
rectangles are hardcoded based on that with the ASCII G.

9
00:00:44,500 --> 00:00:51,280
If we wanted to add another building into our data giving us the six tallest building as well then we'd

10
00:00:51,280 --> 00:00:56,750
need to resize and reposition our rectangles or make our SPG wider.

11
00:00:56,770 --> 00:01:03,960
We will be using Ben's skills to do this which are less scale that you'll need to know of course band

12
00:01:03,960 --> 00:01:09,900
scale that pretty much exclusively used to space out different categories in a bar chart which is what

13
00:01:09,900 --> 00:01:12,750
we're trying to do with our buildings.

14
00:01:12,800 --> 00:01:19,260
You can see what a band scale looks like in this diagram the scale splits up the range the band equal

15
00:01:19,260 --> 00:01:25,370
length based on how many elements as the main we give the scale and the array of categories that we

16
00:01:25,370 --> 00:01:30,890
want to display as their main and a minimum and maximum value for the range which defines the pixel

17
00:01:30,890 --> 00:01:34,370
positions that we want that chart to be spaced over.

18
00:01:34,390 --> 00:01:40,390
We also need to provide ratios for padding out certain padding in which defines how thick the bars should

19
00:01:40,390 --> 00:01:40,930
be.

20
00:01:41,850 --> 00:01:47,010
If we pass in an input then the square will return the starting position of the band that the category

21
00:01:47,010 --> 00:01:48,310
maps do.

22
00:01:48,480 --> 00:01:53,970
We also have access the width of the bands through the band width method of the scale and we can use

23
00:01:53,970 --> 00:01:57,920
the step method to get the distance between the start of adjacent bands.

24
00:01:59,640 --> 00:02:04,980
Looking at this from our black box analogy again we need to give the scale an array of strings for the

25
00:02:05,160 --> 00:02:07,280
main just like an ordinal scale.

26
00:02:08,160 --> 00:02:13,390
For the range things look similar to a linear scale taking two integers representing the minimum and

27
00:02:13,390 --> 00:02:17,440
maximum pixel values that will be scaling between.

28
00:02:17,460 --> 00:02:23,990
We also need to provide padding in the padding adds value which need to be a number between 0 and 1.

29
00:02:24,940 --> 00:02:30,270
If we use a padding in a value 0 then there will be no space between any of the bars.

30
00:02:30,580 --> 00:02:35,890
If we use the padding out of value of 0 then there'll be no padding between the first the last bars

31
00:02:35,890 --> 00:02:37,260
at the edge of the SPG.

32
00:02:37,260 --> 00:02:43,740
Candace looking at these examples we can see that our scale wants to position the South American band

33
00:02:43,740 --> 00:02:49,020
that 209 pixels which makes sense because it is the fourth element in our array.

34
00:02:49,230 --> 00:02:52,710
So the ban should be a little bit right of the middle.

35
00:02:52,710 --> 00:02:58,080
Similarly we get a value of thirteen point one for the start of our African band because there are no

36
00:02:58,080 --> 00:03:04,770
bends before it and it's just a little bit of padding something to note with bends scales is that we

37
00:03:04,770 --> 00:03:08,650
can't add new values in the same way that we could for ordinal scale.

38
00:03:08,940 --> 00:03:14,400
So if we try to call it on a value that doesn't exist in the domain then the scale will just return

39
00:03:14,460 --> 00:03:19,540
undefined taking a look at the syntax here.

40
00:03:19,740 --> 00:03:25,500
Nothing should be too surprising the domain should be similar to the domain of an ordinal scale and

41
00:03:25,500 --> 00:03:28,610
the range should be similar to the range of linnus scale.

42
00:03:28,860 --> 00:03:33,960
We also use the padding in there and padding out to methods figure out how much whitespace we want between

43
00:03:33,960 --> 00:03:40,470
each bands in the final console log on the screen you can see that we have access the bandwidth of a

44
00:03:40,470 --> 00:03:47,710
scale which will come in handy for a chart to set the weights of our different rectangles.

45
00:03:47,710 --> 00:03:52,520
Let's take a look at how we would use this band scale in our world's tallest buildings chart.

46
00:03:53,750 --> 00:03:55,450
This should look really familiar.

47
00:03:56,350 --> 00:04:03,100
I'm using a range between zero and 400 to reflect the size of our SPG canvas and I'm passing in the

48
00:04:03,100 --> 00:04:06,670
strings about building names that we had an adjacent file.

49
00:04:06,760 --> 00:04:12,370
I've started up with a value of four point two for both the padding in and the padding outer and we

50
00:04:12,370 --> 00:04:15,510
can adjust that value later depending on what it looks like.

51
00:04:16,800 --> 00:04:23,190
Now if we wanted to pass in one of our building names such as the Burj Khalifa or X scale then we should

52
00:04:23,190 --> 00:04:28,030
get the x coordinates where the rectangle should be positioned.

53
00:04:28,060 --> 00:04:30,030
I'll try this out with a console log.

54
00:04:34,780 --> 00:04:38,250
This value looks about right for the first by an up arch up.

55
00:04:38,410 --> 00:04:39,710
We have a little bit of room.

56
00:04:39,730 --> 00:04:44,840
The padding outer Jamaica x values come from X scale.

57
00:04:44,910 --> 00:04:49,850
We just need to return the value that we get from passing a building name into the X scale.

58
00:04:52,830 --> 00:04:57,660
We also need to update the width property and we can give a value of x bandwidth

59
00:05:01,580 --> 00:05:05,780
once you refresh the screen and we can see the changes that this has on rectangles.

60
00:05:06,170 --> 00:05:10,790
This is working as expected but I'll fiddle around with the padding values to make the rectangle a little

61
00:05:10,790 --> 00:05:11,560
narrower.

62
00:05:17,070 --> 00:05:22,880
Where the value of no point free I think that this looks about right now.

63
00:05:22,920 --> 00:05:27,960
Let's say that I want to go back and adding two more buildings to my data.

64
00:05:28,140 --> 00:05:33,690
I did a quick search on Wikipedia for the sixth and seventh tallest buildings in the world and then

65
00:05:33,720 --> 00:05:35,020
added values in here.

66
00:05:35,060 --> 00:05:40,880
One World Trade Center and the Guangzhou so CTF finance center.

67
00:05:41,080 --> 00:05:47,300
If we refresh the page it might look like we have a problem here because the scale didn't readjust.

68
00:05:47,590 --> 00:05:51,340
But it turns out that we still need to add in new buildings to the main

69
00:05:54,430 --> 00:05:56,030
typing in both of these values.

70
00:05:56,030 --> 00:06:04,520
Now we can see that our bands have adjusted keeping the same proportions as for congratulations.

71
00:06:04,560 --> 00:06:10,850
You now know all of the most common types of scale that you'll need to make pretty much any visualization.

72
00:06:10,890 --> 00:06:15,810
We also now have a charge that can display any number of buildings of any size which is a real step

73
00:06:15,810 --> 00:06:16,430
forward.

74
00:06:17,580 --> 00:06:23,600
Next lecture will be making another improvement to our code so that we don't need to set the main uses

75
00:06:23,670 --> 00:06:25,040
hardcoded numbers.

