1
00:00:06,500 --> 00:00:11,760
In this lecture I'm going to be running you through some functions that D-3 gives us formatting data

2
00:00:12,680 --> 00:00:18,150
I'll be introducing you to the D-3 format function which allows us to convert messy numbers into a clean

3
00:00:18,150 --> 00:00:21,040
format that we can display on our graphs.

4
00:00:21,060 --> 00:00:27,030
You learn the syntax behind specifiers which these format functions are meant to interpret and also

5
00:00:27,030 --> 00:00:32,910
introduce you to D-3 time format and D-3 time pauvres which will often be using whenever you need to

6
00:00:32,910 --> 00:00:35,310
work with dates and your visualizations.

7
00:00:37,840 --> 00:00:43,870
We'll mainly be using the format function in this course to convert Mesi floating point numbers into

8
00:00:43,870 --> 00:00:47,370
a clean uniform format.

9
00:00:47,380 --> 00:00:53,290
This could involve adding income as a separate thousands with large numbers determining how many decimal

10
00:00:53,290 --> 00:01:00,290
points are some significant figures we should use or displaying numbers as a percentage as a currency.

11
00:01:00,290 --> 00:01:05,690
The way that the format function works is by feeding in a specified string which tells the format function

12
00:01:05,720 --> 00:01:09,560
how to format its inputs.

13
00:01:09,650 --> 00:01:15,290
I'll be giving a brief overview of the specifiers in the next few slides but you should check the D-3

14
00:01:15,290 --> 00:01:18,380
documentation if you want to understand it more thoroughly.

15
00:01:20,480 --> 00:01:26,480
Here's what format functions might look like in D-3 these strings that we're passing in as the arguments

16
00:01:26,480 --> 00:01:32,390
to a format functions of the specifiers and you can see how using different characters we can induce

17
00:01:32,450 --> 00:01:35,210
few different behaviors.

18
00:01:35,290 --> 00:01:38,250
The syntax might look a little confusing here.

19
00:01:38,440 --> 00:01:43,660
D-3 format actually returns a function which is taking a numbers argument.

20
00:01:43,690 --> 00:01:49,360
We can also store this function as a variable as we have an example below and then call that variable

21
00:01:49,360 --> 00:01:51,190
as a function.

22
00:01:51,190 --> 00:01:56,280
This might make more sense if we're using the same format repeatedly in different parts of our code.

23
00:01:59,400 --> 00:02:04,690
For putting together a specifier of our own to use we need to put the right characters in the right

24
00:02:04,750 --> 00:02:06,450
order of us ring.

25
00:02:06,910 --> 00:02:12,300
There are a lot of different options for exactly how each format numbers but to keep things simple.

26
00:02:12,310 --> 00:02:19,650
I'm just going to talk about the sign symbol comma separator precision and type part of the string.

27
00:02:20,700 --> 00:02:26,010
All of the other fields are optional so we can leave any of the shows out as long as everything else

28
00:02:26,010 --> 00:02:27,210
is in the right order.

29
00:02:29,740 --> 00:02:33,770
The first important field to talk about is the sign field.

30
00:02:33,850 --> 00:02:39,460
If we use a minus sign here then a format will show a minus sign for negative values with nothing for

31
00:02:39,470 --> 00:02:41,150
zero positive numbers.

32
00:02:42,010 --> 00:02:47,800
If we use a plus sign then a format will add a plus sign for zero and positive numbers with the minus

33
00:02:47,800 --> 00:02:50,410
sign negative numbers.

34
00:02:50,410 --> 00:02:56,700
If we use a left bracket we'll have nothing zero and positive numbers and a number in parentheses with

35
00:02:56,710 --> 00:02:57,840
negative numbers.

36
00:02:59,790 --> 00:03:05,790
Next if you write a dollar sign then D-3 will add a currency symbol to that number.

37
00:03:05,790 --> 00:03:10,680
It's important to know that if you want to use a different currency than US dollars then you need to

38
00:03:10,680 --> 00:03:15,080
define a custom locale and call the function as a module of the locale.

39
00:03:15,890 --> 00:03:21,990
A locale is basically an object with fields containing country specific information such as the unions

40
00:03:22,030 --> 00:03:23,750
that things are measured in.

41
00:03:23,920 --> 00:03:29,190
If you want to learn how to make a locale of your own and you can check it out and the D-3 documentation

42
00:03:31,740 --> 00:03:38,190
if at this point you add a comment to the string then the function will add a comma as a thousands separator.

43
00:03:38,190 --> 00:03:43,020
Again if you want to use a different character as a space eg thousands or if you want to group digits

44
00:03:43,020 --> 00:03:48,780
by a number different than three then you can pass that information into a custom locale and call it

45
00:03:48,780 --> 00:03:49,700
from there.

46
00:03:52,220 --> 00:03:58,970
Next if you add a decimal point in followed by a number then this will tell D-3 how many Deprenyl points

47
00:03:58,970 --> 00:04:06,020
to show as the precision depending when you put the type field covered in the next slide you could take

48
00:04:06,020 --> 00:04:10,650
this number to be a number of significant figures or to be a number of decimal points.

49
00:04:13,040 --> 00:04:18,550
Finally we can add one of these type values to give number a particular format.

50
00:04:18,680 --> 00:04:24,170
The most common values that you'll actually want to use are F which formats the number is having a fixed

51
00:04:24,170 --> 00:04:30,390
number of digits after the decimal point or a cent sign which forms the number as a percentage.

52
00:04:32,630 --> 00:04:39,030
For formatting time D-3 has a separate suite of functions called the three time format in the time.

53
00:04:39,040 --> 00:04:45,390
Cause again we'll be creating a string to pass into our time format and time pass functions which will

54
00:04:45,390 --> 00:04:47,710
determine how the data is formatted.

55
00:04:49,690 --> 00:04:52,220
We're using the time format function.

56
00:04:52,240 --> 00:04:57,160
The goal is to go from a javascript data object to a human readable stream.

57
00:04:57,250 --> 00:05:02,900
For example we might want to show the data on the screen corresponding to a point on a time axis.

58
00:05:03,100 --> 00:05:09,490
Since that time scales only work with javascript data objects will want to format the output as an easy

59
00:05:09,490 --> 00:05:10,550
to read string.

60
00:05:11,810 --> 00:05:14,760
D3 timepass goes in the opposite way.

61
00:05:15,230 --> 00:05:20,750
We provide a differing format and possible will convert spring of a date that matches the format into

62
00:05:20,750 --> 00:05:23,180
a javascript date object.

63
00:05:23,180 --> 00:05:28,610
For example we might have a list of dates in the spreadsheet strings which we want to make a time scale

64
00:05:28,610 --> 00:05:30,890
with again as time scales.

65
00:05:30,890 --> 00:05:36,080
I only work with the javascript data object and we need to write a parser to work with the dates in

66
00:05:36,080 --> 00:05:40,270
a spreadsheet in terms of how we structure a specifier.

67
00:05:40,280 --> 00:05:45,880
For time formatting and passing we can use any of these directives to get different pieces from the

68
00:05:45,890 --> 00:05:47,610
date object.

69
00:05:47,620 --> 00:05:52,830
Each of these directives take the form of a percentage sign followed by a character.

70
00:05:53,070 --> 00:05:58,260
We can add any kinds of characters that we like outside of these directives and they will be rendered

71
00:05:58,260 --> 00:06:02,490
with the format space things out.

72
00:06:02,570 --> 00:06:09,080
Let me walk you through a couple of examples here to show how the specifiers should look in the time

73
00:06:09,080 --> 00:06:10,190
pass function here.

74
00:06:10,220 --> 00:06:16,900
We're using three directives present day gives as a two digit number representing the day of the month

75
00:06:17,840 --> 00:06:24,250
percent and gives us a two digit number representing the month and percent y gives a two digit number

76
00:06:24,340 --> 00:06:25,860
expressing the year.

77
00:06:26,230 --> 00:06:30,130
We're also using three slashes as padding.

78
00:06:30,360 --> 00:06:35,280
When we feed in 19 slash 12 slash 93 here.

79
00:06:35,310 --> 00:06:43,890
Our parser interprets 19 as the day 12 is the month and 93 is the year and spits out 19th of December

80
00:06:43,890 --> 00:06:45,220
1993.

81
00:06:45,260 --> 00:06:53,350
A javascript date object for the time format function we're passing in percent and present day in different

82
00:06:53,380 --> 00:07:01,390
order and we are using a percent capital Y which instead relates to four digit regimentation year.

83
00:07:01,460 --> 00:07:05,670
We're also using dashes to separate dates instead of slashes.

84
00:07:05,840 --> 00:07:10,580
We can put any characters that we wanted to specify to do this with.

85
00:07:10,580 --> 00:07:17,510
Now if we put the data object that we got from a time pass example into this format function we get

86
00:07:17,510 --> 00:07:21,800
a string representation of the date in the format that we are asking for.

87
00:07:21,800 --> 00:07:27,710
So here we have the American style date format where the first field corresponds to the month the second

88
00:07:27,710 --> 00:07:31,300
field corresponds to the day.

89
00:07:31,390 --> 00:07:36,850
Hopefully by the end of this lecture you should understand how to write specifiers for both number formatting

90
00:07:36,880 --> 00:07:38,380
and time for it.

91
00:07:38,920 --> 00:07:43,420
You shouldn't need to memorize all of the different symbols that you might need to write to the specifiers

92
00:07:43,930 --> 00:07:49,660
but you should feel comfortable with using the D-3 documentation as a reference for what to use in the

93
00:07:49,660 --> 00:07:54,760
next lecture I will be adding tool tips to graph from the last section which will let the user take

94
00:07:54,760 --> 00:07:56,530
a deeper look into the data.

