1
00:00:06,770 --> 00:00:12,730
In this lecture I'll be introducing you to the principles of object oriented programming which we can

2
00:00:12,730 --> 00:00:15,760
use to write up visualizations as objects.

3
00:00:16,620 --> 00:00:21,830
I'll be talking about the benefits that this approach gives us for making more complex projects and

4
00:00:21,830 --> 00:00:26,140
I'll be taking you through the syntax that we can to use.

5
00:00:26,150 --> 00:00:32,890
So what do we mean by the idea of writing a visualization as an object in any programming language.

6
00:00:32,890 --> 00:00:38,590
An object is a self-contained component which has a set of properties and methods which you can use

7
00:00:38,590 --> 00:00:43,320
to express something object oriented programming or.

8
00:00:43,380 --> 00:00:49,460
OK involves thinking about every piece of code that we write as being an object.

9
00:00:49,480 --> 00:00:54,670
This allows us to create lots of different components within our code which can hold information about

10
00:00:54,670 --> 00:01:00,490
their current state in their properties and perform certain functions by calling them methods.

11
00:01:01,270 --> 00:01:08,490
For example here's how we might express an apple and a banana two objects for each of these fruits we're

12
00:01:08,500 --> 00:01:14,410
giving them properties to show their name how sweet they are and their shape and we're giving them two

13
00:01:14,410 --> 00:01:17,710
methods which express what we could do with them.

14
00:01:17,710 --> 00:01:20,090
These methods could do absolutely anything.

15
00:01:23,190 --> 00:01:28,380
Another key feature of O.P. the idea of creating new objects of a certain class.

16
00:01:28,470 --> 00:01:34,740
For example we might want to decide to create a class called fruit which are apple and banana both belong

17
00:01:34,740 --> 00:01:43,220
to if we create these objects as an instance of the class fruit then the fruits object can inherit some

18
00:01:43,220 --> 00:01:48,440
of the fields from this class instead of having to define new properties and methods.

19
00:01:48,460 --> 00:01:56,540
Every time for example we can have a generic it and throwing method attached to the class of fruit.

20
00:01:56,540 --> 00:02:02,990
Then whenever we create a new instance of one of these fruits that automatically inherit these two methods

21
00:02:03,020 --> 00:02:04,870
which they can use.

22
00:02:04,910 --> 00:02:10,190
This means that whenever we want to create a new fruit we don't have to write out each of these methods

23
00:02:10,220 --> 00:02:12,230
do every single time.

24
00:02:12,260 --> 00:02:17,180
We just need to pass in the data that differs across the fruits.

25
00:02:17,370 --> 00:02:19,970
We can do this with our visualizations too.

26
00:02:20,340 --> 00:02:26,340
For example we have two types of visualizations here that we might want to create these visualizations

27
00:02:26,340 --> 00:02:31,590
can have properties such as that width and height and we can give them different methods for them to

28
00:02:31,590 --> 00:02:33,040
use.

29
00:02:33,090 --> 00:02:37,860
We then create a class for every type of visualization that we want to write.

30
00:02:37,860 --> 00:02:43,650
For example we might want to make a bar chart class which contains a bunch of fields that all bar charts

31
00:02:43,650 --> 00:02:44,720
should have.

32
00:02:45,270 --> 00:02:49,650
We should pass in some information to make a new batch of such as where we want to attach it and the

33
00:02:49,650 --> 00:02:51,560
data source that you should use.

34
00:02:51,750 --> 00:02:55,150
And then we could easily make many bar charts at the same time.

35
00:02:56,310 --> 00:03:01,710
There were three main reasons why we should always try to write visualizations as objects.

36
00:03:02,370 --> 00:03:07,660
Firstly it makes our visualizations a lot more reusable between different projects.

37
00:03:07,740 --> 00:03:13,260
Once you have an object set up over a particular visualization then it should be easy to use the same

38
00:03:13,260 --> 00:03:15,540
code for a different purpose.

39
00:03:15,690 --> 00:03:21,270
You can copy your file containing this visualization object into a different project folder and then

40
00:03:21,270 --> 00:03:23,570
you can use it in the exact same way.

41
00:03:24,320 --> 00:03:29,780
Another reason why we want to write our visualizations as objects is that it reduces the number of global

42
00:03:29,780 --> 00:03:33,400
variables that a site needs to keep track of.

43
00:03:33,400 --> 00:03:39,250
Imagine if we wanted to create two different visualizations on the same page without splitting our code

44
00:03:39,250 --> 00:03:45,160
and objects we need to make new variables for each visualization to hold things like their heights with

45
00:03:45,370 --> 00:03:47,060
scales.

46
00:03:47,110 --> 00:03:52,690
This could quickly become confusing if we ended up having a separate line chart with variable to a pie

47
00:03:52,690 --> 00:03:54,230
chart with variable.

48
00:03:54,490 --> 00:03:58,330
And it means that code will get messier and more confusing as time goes on.

49
00:03:59,510 --> 00:04:03,400
Treating our visualizations as objects provides a solution to this.

50
00:04:03,530 --> 00:04:09,230
We can hold variables as properties of our visualization objects and then we can hold the functions

51
00:04:09,260 --> 00:04:11,390
as methods.

52
00:04:11,390 --> 00:04:17,420
Finally the other upside is using objects like this that we can make many of the same type of visualization

53
00:04:17,840 --> 00:04:20,000
without having to write much more code.

54
00:04:20,840 --> 00:04:26,810
For instance if he wants to add four different line charts to a page at once then we just need to write

55
00:04:26,810 --> 00:04:32,830
the bulk of our code once when we write the code for Object class.

56
00:04:32,880 --> 00:04:34,860
Here's what the new set up will look like.

57
00:04:34,860 --> 00:04:41,670
Each of our visualizations once that written piece style each of our visualization objects will have

58
00:04:41,670 --> 00:04:46,710
three methods in it is Rangle data and update this unit.

59
00:04:46,720 --> 00:04:53,020
This method will draw a graph for the first time possibly loading in a data setting the values for us

60
00:04:53,060 --> 00:04:57,470
scales axes and setting up our SPG components.

61
00:04:57,480 --> 00:05:03,150
Then when we have a Rangle data method we can shuffle or filter out data depending on what the user

62
00:05:03,150 --> 00:05:04,230
wants to see.

63
00:05:05,100 --> 00:05:09,940
Finally we have the update is function which will basically be doing the same thing.

64
00:05:10,020 --> 00:05:12,340
Change functions have been doing so far.

65
00:05:12,360 --> 00:05:19,430
So just updating us scales axes and SFE cheese when we first create an instance of our visualization

66
00:05:19,430 --> 00:05:20,510
class.

67
00:05:20,640 --> 00:05:27,170
This will trigger a that visualisations it is a method which in turn will call the Wrangel data method

68
00:05:27,770 --> 00:05:31,460
which itself will trigger the update method.

69
00:05:31,460 --> 00:05:37,580
Then whenever we want to update a visualisation like this with new data we can call our Wrangell data

70
00:05:37,580 --> 00:05:43,710
method which will format out data and again cause update functions run.

71
00:05:43,880 --> 00:05:47,180
Here's what the basic syntax will look like.

72
00:05:47,180 --> 00:05:54,320
First we have an object definition where we're creating a new class called Barcott as a general rule.

73
00:05:54,320 --> 00:05:56,630
We conventionally write classes in javascript.

74
00:05:56,640 --> 00:06:01,070
In other camel case so the every word is capitalized.

75
00:06:01,400 --> 00:06:08,210
The function is called the constructor function for a batch of class every time we want to write a new

76
00:06:08,210 --> 00:06:10,330
instance of a bar chart object.

77
00:06:10,580 --> 00:06:17,730
This function will get run in arguments that this function takes will set up a object with some initial

78
00:06:17,730 --> 00:06:22,390
conditions and are typically written with an underscore at the front of their names.

79
00:06:23,460 --> 00:06:28,950
In this second block here we can see how to add a method to the object in javascript.

80
00:06:29,100 --> 00:06:34,110
We need to use this prototype syntax passing in whatever name we want to give our method.

81
00:06:34,110 --> 00:06:42,360
At the end finally in the bottom block here we have the syntax of making a new object of a certain class.

82
00:06:42,400 --> 00:06:49,210
We use the reserved word new in javascript to create a new object here and we're passing into arguments

83
00:06:49,510 --> 00:06:52,810
which are a function will use.

84
00:06:52,830 --> 00:06:59,730
First we have the string bartk container which object will take as its parent element and we're passing

85
00:06:59,730 --> 00:07:07,440
in an array of data which officials zation will be using then since we're saving this object as a variable.

86
00:07:07,440 --> 00:07:13,640
This lower case bartk variable we can now call any of its methods on our object.

87
00:07:13,740 --> 00:07:20,890
So here we could call the potshots in this method which will then run that method's code something to

88
00:07:20,890 --> 00:07:26,860
note here is that we are using the this keyword javascript to access the different methods and properties

89
00:07:26,900 --> 00:07:30,870
are contained within the particular object instance that we're looking at.

90
00:07:32,010 --> 00:07:38,780
When this object gets built for the first time in a constructor function the line colored in red will

91
00:07:38,790 --> 00:07:42,940
call the method of the same object that we just created.

92
00:07:43,900 --> 00:07:50,030
In the second block with then storing the value of this in a variable called vid's which will then use

93
00:07:50,030 --> 00:07:54,920
to access objects different properties and methods.

94
00:07:55,160 --> 00:08:00,110
At the end of this lecture you should have a good understanding of why we want to restructure our visualisations

95
00:08:00,170 --> 00:08:05,480
in the form of objects and you've had your first look at how the syntax should work.

96
00:08:06,400 --> 00:08:12,430
In the next Levchin I'll be taking you through the process of rewriting our code from project 3 in this

97
00:08:12,490 --> 00:08:16,440
object orientating style which we'll be using when we going forward.

